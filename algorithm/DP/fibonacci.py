# 피보나치 DP로 구현
# 0 1 1 2 3 5 8 13 21 34
# 단순하게 재귀로 돌리면 이미 계산한 값을 또 계산하게 된다.
# 메모이제이션을 사용하여 이미 계산한 값을 저장해두고 재사용한다.

# https://www.acmicpc.net/problem/2748
# 문제
# 피보나치 수는 0과 1로 시작한다. 0번째 피보나치 수는 0이고, 1번째 피보나치 수는 1이다. 그 다음 2번째 부터는 바로 앞 두 피보나치 수의 합이 된다.

# 이를 식으로 써보면 Fn = Fn-1 + Fn-2 (n ≥ 2)가 된다.

# n=17일때 까지 피보나치 수를 써보면 다음과 같다.

# 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597

# n이 주어졌을 때, n번째 피보나치 수를 구하는 프로그램을 작성하시오.

# 입력
# 첫째 줄에 n이 주어진다. n은 90보다 작거나 같은 자연수이다.

# 출력
# 첫째 줄에 n번째 피보나치 수를 출력한다.

# 예제 입력 1 
# 10
# 예제 출력 1 
# 55

# 아래처럼 재귀로 구현하면 시간초과가 발생한다.
# 50만 넣어도 답이 안나온다.
import sys
input = sys.stdin.readline
# def f(n):
#   return f(n-1) + f(n-2) if n > 1 else n

# print(f(int(input())))

# 메모이제이션을 사용하여 이미 계산한 값을 저장해두고 재사용한다.

cache = [-1] * 91
cache[0] = 0
cache[1] = 1 # 0번째 피보나치 수는 0이고, 1번째 피보나치 수는 1이다.
# cnt = 0 # 디버깅용

def f(n):
  # global cnt
  # cnt += 1
  # 처음 계산할 때는 -1로 초기화 되어있다.
  if cache[n] == -1:
    cache[n] = f(n-1) + f(n-2)
  return cache[n]
print(f(int(input())))
# print(cnt) # 디버깅용

# 아래처럼 바텀업 반복문으로 구할 수도 있다.
# import sys
# input = sys.stdin.readline

# N = int(input())
# cache = [-1] * 91
# cache[0] = 0
# cache[1] = 1 # 0번째 피보나치 수는 0이고, 1번째 피보나치 수는 1이다.

# for i in range(2, N+1):
#     cache[i] = cache[i-1] + cache[i-2]
# print(cache[N])