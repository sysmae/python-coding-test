# https://www.acmicpc.net/problem/10844
# 문제
# 45656이란 수를 보자.

# 이 수는 인접한 모든 자리의 차이가 1이다. 이런 수를 계단 수라고 한다.

# N이 주어질 때, 길이가 N인 계단 수가 총 몇 개 있는지 구해보자. 0으로 시작하는 수는 계단수가 아니다.

# 입력
# 첫째 줄에 N이 주어진다. N은 1보다 크거나 같고, 100보다 작거나 같은 자연수이다.

# 출력
# 첫째 줄에 정답을 1,000,000,000으로 나눈 나머지를 출력한다.

# 예제 입력 1 
# 1
# 예제 출력 1 
# 9

# 예제 입력 2 
# 2
# 예제 출력 2 
# 17



# f(n)은 길이 n인 계단 수의 개수
# f(n)에 대한 점화식을 구할 수 있으면 좋겠지만 파라미터 n 만 가지고는 점화식 만들 수 없다.
# n뿐만 아니라 마지막 자릿수 d 도 필요하다.
# 45656 이면 n=5, d=6 -> 그다음 올 수 있는 건 5,7
# 1234 이면 n=4, d=4 -> 그다음 올 수 있는 건 3,5
# 456543210 이면 n=9, d=0 -> 그다음 올 수 있는 건 1
# 789 이면 n=4, d=9 -> 그다음 올 수 있는 건 8
# 1부터 8까지는 +1,-1 올 수 있는데 0과 9는 -1, +1 밖에 올 수 없다.

# f(n,d) : 길이 n인 계단 수의 개수, 마지막 자릿수가 d인 경우
# f(n,0) + f(n,1) + f(n,2) + f(n,3) + f(n,4) + f(n,5) + f(n,6) + f(n,7) + f(n,8) + f(n,9) 더하고 MOD로 나눈 나머지

# f(n,d) = f(n-1,d-1) + f(n-1,d+1)
# 단 이 때 d-1, d+1이 0~9 범위 안에 있어야 한다.

# 초기값 f(1,d) = 1 (d=1~9)
# f(1,0) = 0

import sys
input = sys.stdin.readline

MOD = 1000000000
# cache[n][d] : 길이 n인 계단 수의 개수, 마지막 자릿수가 d인 경우
cache = [[0] * 10 for _ in range(101)]
# 초기값
cache[1][0] = 0
for i in range(1, 10):
    cache[1][i] = 1

# 점화식
for i  in range(2, 101): # 길이 n
    for j in range(10): # 마지막 자릿수 d
        if j == 0:
            cache[i][j] = cache[i-1][1] % MOD
        elif j == 9:
            cache[i][j] = cache[i-1][8] % MOD
        else:
            cache[i][j] = (cache[i-1][j-1] + cache[i-1][j+1]) % MOD


ans = 0
n = int(input())
for j in range(10):
    ans += cache[n][j]
    ans %= MOD # 파이썬은 굳이 안해도 되지만 다른 언어에선 오버플로우 방지
print(ans)