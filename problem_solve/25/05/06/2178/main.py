# https://www.acmicpc.net/problem/2178
# 문제
# N×M크기의 배열로 표현되는 미로가 있다.

# 1	0	1	1	1	1
# 1	0	1	0	1	0
# 1	0	1	0	1	1
# 1	1	1	0	1	1
# 미로에서 1은 이동할 수 있는 칸을 나타내고, 0은 이동할 수 없는 칸을 나타낸다. 이러한 미로가 주어졌을 때, (1, 1)에서 출발하여 (N, M)의 위치로 이동할 때 지나야 하는 최소의 칸 수를 구하는 프로그램을 작성하시오. 한 칸에서 다른 칸으로 이동할 때, 서로 인접한 칸으로만 이동할 수 있다.

# 위의 예에서는 15칸을 지나야 (N, M)의 위치로 이동할 수 있다. 칸을 셀 때에는 시작 위치와 도착 위치도 포함한다.

# 입력
# 첫째 줄에 두 정수 N, M(2 ≤ N, M ≤ 100)이 주어진다. 다음 N개의 줄에는 M개의 정수로 미로가 주어진다. 각각의 수들은 붙어서 입력으로 주어진다.

# 출력
# 첫째 줄에 지나야 하는 최소의 칸 수를 출력한다. 항상 도착위치로 이동할 수 있는 경우만 입력으로 주어진다.

# 예제 입력 1 
# 4 6
# 101111
# 101010
# 101011
# 111011
# 예제 출력 1 
# 15

# 예제 입력 2 
# 4 6
# 110110
# 110110
# 111111
# 111101
# 예제 출력 2 
# 9

# 예제 입력 3 
# 2 25
# 1011101110111011101110111
# 1110111011101110111011101
# 예제 출력 3 
# 38

# 예제 입력 4 
# 7 7
# 1011111
# 1110001
# 1000001
# 1000001
# 1000001
# 1000001
# 1111111
# 예제 출력 4 
# 13

# 전형적인 길찾기 문제로 bfs로 최단경로 찾기
import sys
from collections import deque
input = sys.stdin.readline
N,M = map(int, input().split())
maze = [input().rstrip() for _ in range(N)]
dy = (0,1,0,-1) # 상하좌우
dx = (1,0,-1,0) # 상하좌우

def is_valid(y,x):
   return 0<=y <N and 0<=x<M and maze[y][x] == '1' # 범위 체크 및 이동 가능 체크

def bfs():
   chk = [[False] * M for _ in range(N) ] # 체크 배열 초기화
   chk[0][0] = True # 시작점 체크
   dq = deque([(0,0,1)]) # 큐 초기화 + 몇칸 지났는지 체크
   while dq:
      y,x,d = dq.popleft() # 큐에서 좌표를 꺼냄
      if y == N-1 and x == M-1:
         return d # 도착점에 도달하면 몇칸 지났는지 리턴
      nd = d +1
      for i in range(4):
         ny = y + dy[i]
         nx = x + dx[i]
         if is_valid(ny,nx) and not chk[ny][nx]:
            chk[ny][nx] = True
            dq.append((ny,nx,nd)) # 큐에 좌표와 몇칸 지났는지 추가
            print('chk',chk)
            print('dq',dq)
   return -1 # 도착점에 도달하지 못하면 -1 리턴, 이 문제에서는 항상 도착점에 도달할 수 있다고 했으므로 이 부분은 필요없음

print(bfs())
