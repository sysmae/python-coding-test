# https://www.acmicpc.net/problem/14503
# 문제
# 로봇 청소기와 방의 상태가 주어졌을 때, 청소하는 영역의 개수를 구하는 프로그램을 작성하시오.

# 로봇 청소기가 있는 방은 
# $N \times M$ 크기의 직사각형으로 나타낼 수 있으며, 
# $1 \times 1$ 크기의 정사각형 칸으로 나누어져 있다. 각각의 칸은 벽 또는 빈 칸이다. 청소기는 바라보는 방향이 있으며, 이 방향은 동, 서, 남, 북 중 하나이다. 방의 각 칸은 좌표 
# $(r, c)$로 나타낼 수 있고, 가장 북쪽 줄의 가장 서쪽 칸의 좌표가 
# $(0, 0)$, 가장 남쪽 줄의 가장 동쪽 칸의 좌표가 
# $(N-1, M-1)$이다. 즉, 좌표 
# $(r, c)$는 북쪽에서 
# $(r+1)$번째에 있는 줄의 서쪽에서 
# $(c+1)$번째 칸을 가리킨다. 처음에 빈 칸은 전부 청소되지 않은 상태이다.

# 로봇 청소기는 다음과 같이 작동한다.

# 현재 칸이 아직 청소되지 않은 경우, 현재 칸을 청소한다.
# 현재 칸의 주변 
# $4$칸 중 청소되지 않은 빈 칸이 없는 경우,
# 바라보는 방향을 유지한 채로 한 칸 후진할 수 있다면 한 칸 후진하고 1번으로 돌아간다.
# 바라보는 방향의 뒤쪽 칸이 벽이라 후진할 수 없다면 작동을 멈춘다.
# 현재 칸의 주변 
# $4$칸 중 청소되지 않은 빈 칸이 있는 경우,
# 반시계 방향으로 
# $90^\circ$ 회전한다.
# 바라보는 방향을 기준으로 앞쪽 칸이 청소되지 않은 빈 칸인 경우 한 칸 전진한다.
# 1번으로 돌아간다.
# 입력
# 첫째 줄에 방의 크기 
# $N$과 
# $M$이 입력된다. 
# $(3 \le N, M \le 50)$  둘째 줄에 처음에 로봇 청소기가 있는 칸의 좌표 
# $(r, c)$와 처음에 로봇 청소기가 바라보는 방향 
# $d$가 입력된다. 
# $d$가 
# $0$인 경우 북쪽, 
# $1$인 경우 동쪽, 
# $2$인 경우 남쪽, 
# $3$인 경우 서쪽을 바라보고 있는 것이다.

# 셋째 줄부터 
# $N$개의 줄에 각 장소의 상태를 나타내는 
# $N \times M$개의 값이 한 줄에 
# $M$개씩 입력된다. 
# $i$번째 줄의 
# $j$번째 값은 칸 
# $(i, j)$의 상태를 나타내며, 이 값이 
# $0$인 경우 
# $(i, j)$가 청소되지 않은 빈 칸이고, 
# $1$인 경우 
# $(i, j)$에 벽이 있는 것이다. 방의 가장 북쪽, 가장 남쪽, 가장 서쪽, 가장 동쪽 줄 중 하나 이상에 위치한 모든 칸에는 벽이 있다. 로봇 청소기가 있는 칸은 항상 빈 칸이다.

# 출력
# 로봇 청소기가 작동을 시작한 후 작동을 멈출 때까지 청소하는 칸의 개수를 출력한다.

# 예제 입력 1 
# 3 3
# 1 1 0
# 1 1 1
# 1 0 1
# 1 1 1
# 예제 출력 1 
# 1
# 예제 입력 2 
# 11 10
# 7 4 0
# 1 1 1 1 1 1 1 1 1 1
# 1 0 0 0 0 0 0 0 0 1
# 1 0 0 0 1 1 1 1 0 1
# 1 0 0 1 1 0 0 0 0 1
# 1 0 1 1 0 0 0 0 0 1
# 1 0 0 0 0 0 0 0 0 1
# 1 0 0 0 0 0 0 1 0 1
# 1 0 0 0 0 0 1 1 0 1
# 1 0 0 0 0 0 1 1 0 1
# 1 0 0 0 0 0 0 0 0 1
# 1 1 1 1 1 1 1 1 1 1
# 예제 출력 2 
# 57

"""
1. 아이디어
while 문으로 로봇 청소기가 작동하는 동안 반복한다.
4 방향을 for 문으로 순회하면서 청소되지 않은 빈 칸이 있는지 확인한다.
더이상 청소할 칸이 없으면 후진한다.
후진이 불가능하면 작동을 멈춘다.

2. 시간복잡도
O(N * M) - N과 M은 방의 크기: 50 * 50 < 2억

3. 자료구조
map: 방의 상태를 나타내는 2차원 배열 int[][]
로봇 청소기 위치와 방향을 나타내는 변수들

"""

import sys
input = sys.stdin.readline

N,M = map(int, input().split())
y,x,d = map(int, input().split())
# N개의 줄을 입력받아 각 줄을 공백 기준으로 정수 리스트로 변환한 뒤, 2차원 리스트(map)로 저장
map = [list(map(int, input().split())) for _ in range(N)]
cnt = 0  # 청소한 칸의 개수
# 방향 벡터: 북, 동, 남, 서
dy = [-1, 0, 1, 0]
dx = [0, 1, 0, -1]

while True:
  if map[y][x] == 0:
    # 현재 칸이 청소되지 않은 빈 칸인 경우
      map[y][x] = 2  # 현재 칸을 청소
      cnt += 1
  sw = False  # 청소되지 않은 빈 칸이 있는지 여부를 나타내는 변수

  # 4 방향을 순회하면서 청소되지 않은 빈 칸이 있는지 확인
  for i in range(1,5):
    ny = y + dy[d-i]
    nx = x + dx[d-i]
    if 0 <= ny < N and 0 <= nx < M and map[ny][nx] == 0:
      y, x, d = ny, nx, (d-i) % 4  # 청소되지 않은 빈 칸이 있으면 이동
      sw = True
      break

  # 청소되지 않은 빈 칸이 없으면 후진
  if not sw:
    ny = y - dy[d]
    nx = x - dx[d]
    if 0 <= ny < N and 0 <= nx < M and map[ny][nx] != 1:  # 후진이 가능하면
      y, x = ny, nx
    else:  # 후진이 불가능하면 작동을 멈춤
      break

# 청소한 칸의 개수 출력
print(cnt)